<!DOCTYPE html>
<html lang="de-de">
<head>
	<script type="text/javascript">
				(function(d) {
			var enabled = true;
			var ciCollectedCookies = [];
			var cookieDesc =
				Object.getOwnPropertyDescriptor(Document.prototype, 'cookie') ||
				Object.getOwnPropertyDescriptor(HTMLDocument.prototype, 'cookie');

			function checkStorage() {
				var whitelist = ['__cookie_law__', 'PHPSESSID'];
				var cookies = JSON.parse(localStorage.getItem('allowedCookies') || '[]');
				return [].concat.apply(whitelist, cookies);
			}

			if (cookieDesc && cookieDesc.configurable) {
				Object.defineProperty(d, 'cookie', {
					get: function() {
						return cookieDesc.get.call(d);
					},
					set: function(val) {
						var c = val.split('=')[0];
						// cookie marked for removal
						if (val[0] === '!') {
							cookieDesc.set.call(d, val.slice(1));
						} else if (checkStorage().indexOf(c) > -1 || !enabled) {
							cookieDesc.set.call(d, val);
						} else if (ciCollectedCookies.indexOf(val) < 0) {
							ciCollectedCookies.push(val);
						}
					}
				});
			}
			d.cookieChangedCategories = function (allowedCookies) {
				if (Array.isArray(allowedCookies)) {
					localStorage.setItem('allowedCookies', JSON.stringify(allowedCookies));
				}
				if (allowedCookies === true) {
					enabled = false;
				}

				var items = ciCollectedCookies;
				ciCollectedCookies = [];
				items.forEach(function (item) {
					d.cookie = item;
				})

				document.location.reload();
			}
		})(document);
			</script>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<title>Grafana Tutorial</title>
	<base href="https://sanskys.github.io/" />

	
			<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="description" content="Cardano Grafana Dashboard Tutorial" />
	<meta name="keywords" content="Cardano, Grafana, Dashboard, Tutorial" />
		<!-- Facebook Open Graph -->
	<meta property="og:title" content="Grafana Tutorial" />
	<meta property="og:description" content="Cardano Grafana Dashboard Tutorial" />
	<meta property="og:image" content="https://sanskys.github.io/gallery_gen/6aaef6221ba53739628df6959598b271.jpg" />
	<meta property="og:type" content="article" />
	<meta property="og:url" content="https://sanskys.github.io/dashboard" />
	<!-- Facebook Open Graph end -->
		
	<link href="css/bootstrap.min.css" rel="stylesheet" type="text/css" />
	<script src="js/jquery-3.5.1.min.js" type="text/javascript"></script>
	<script src="js/bootstrap.min.js" type="text/javascript"></script>
	<script src="js/main.js?v=20220214150040" type="text/javascript"></script>

	<link href="css/font-awesome/font-awesome.min.css?v=4.7.0" rel="stylesheet" type="text/css" />
	<link href="css/site.css?v=20220214150040" rel="stylesheet" type="text/css" id="wb-site-stylesheet" />
	<link href="css/common.css?ts=1645051479" rel="stylesheet" type="text/css" />
	<link href="css/2.css?ts=1645051479" rel="stylesheet" type="text/css" id="wb-page-stylesheet" />
	<link rel="icon" href="/gallery/Ambassdor-ts1635244342.jpg" type="image/jpeg" />
	<script type="text/javascript">
	window.useTrailingSlashes = false;
	window.disableRightClick = true;
	window.currLang = 'de';
</script>
	
	<link href="css/flag-icon-css/css/flag-icon.min.css" rel="stylesheet" type="text/css" />	
	<!--[if lt IE 9]>
	<script src="js/html5shiv.min.js"></script>
	<![endif]-->

		<script type="text/javascript">
		$(function() {
			if (!document.cookie.match(/(?:^|;\ *)__cookie_law__=1/)) {
				var block = $('<div>')
					.addClass('wb_cookie_policy')
					.css({
						backgroundColor: "rgba(0, 0, 0, 0.66)"					});
				$('<div class="policy-message">')
						.html("<p>Wir verwenden Cookies (und erfassen bestimmte pers\u00f6nliche Daten), um Ihnen eine bessere Online-Erfahrung zu bieten. Durch den Besuch unserer Website akzeptieren Sie unsere Bedingungen.<\/p>\n")
						.css({
							color: "#ffffff",
							fontFamily: "Arial,Helvetica,sans-serif",
							fontSize: 14						})
						.appendTo(block);
				var btnWrapper = $('<div class="policy-button">').appendTo(block);


								$('<button>')
						.attr({type: 'button'})
						.css({
							backgroundColor: "#5cb85c",
							color: "#ffffff",
							fontFamily: "Arial,Helvetica,sans-serif",
							fontSize: 14						})
						.text("Akzeptieren")
						.on('click', function() {
							if (document.cookieChangedCategories) {
								document.cookieChangedCategories(true);
							}
							document.cookie = '__cookie_law__=1; path=/; expires=Sun, 12 Feb 2023 00:44:39 GMT';
							block.remove();
						})
						.appendTo(btnWrapper);
				$(document.body).append(block);
			}
		});
	</script>
	</head>


<body class="site site-lang-de " ><div id="wb_root" class="root wb-layout-vertical"><div class="wb_sbg"></div><div id="wb_header_2" class="wb_element wb-sticky wb-layout-element" data-plugin="LayoutElement" data-h-align="center" data-v-align="top"><a name="header" class="wb_anchor"></a><div class="wb_content wb-layout-vertical"><div id="wb_element_instance6952_0" class="wb_element wb-layout-element" data-plugin="LayoutElement"><div class="wb_content wb-layout-horizontal"><div id="wb_element_instance6953_0" class="wb_element wb-layout-element" data-plugin="LayoutElement"><div class="wb_content wb-layout-horizontal"><div id="wb_element_instance6954_0" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"></div><div id="wb_element_instance6955_0" class="wb_element wb-layout-element" data-plugin="LayoutElement"><div class="wb_content wb-layout-horizontal"><div id="wb_element_instance6956_0" class="wb_element wb-layout-element" data-plugin="LayoutElement"><div class="wb_content wb-layout-horizontal"><div id="wb_element_instance6957_0" class="wb_element wb_element_picture" data-plugin="Picture" title=""><div class="wb_picture_wrap"><svg xmlns="http://www.w3.org/2000/svg" width="1793.982" height="1793.982" viewBox="0 0 1793.982 1793.982" style="direction: ltr; color:#ffffff"><text x="129.501415" y="1537.02" font-size="1792" fill="currentColor" style="font-family: FontAwesome"></text></svg></div></div><div id="wb_element_instance6958_0" class="wb_element wb_element_picture" data-plugin="Picture" title=""><div class="wb_picture_wrap"><a href="https://www.instagram.com/snsky.pool/"><svg xmlns="http://www.w3.org/2000/svg" width="1793.982" height="1793.982" viewBox="0 0 1793.982 1793.982" style="direction: ltr; color:#ffffff"><text x="129.501415" y="1537.02" font-size="1792" fill="currentColor" style="font-family: FontAwesome"></text></svg></a></div></div><div id="wb_element_instance6959_0" class="wb_element wb_element_picture" data-plugin="Picture" title=""><div class="wb_picture_wrap"><a href="https://twitter.com/snsky_pool" target="_blank"><svg xmlns="http://www.w3.org/2000/svg" width="1793.982" height="1793.982" viewBox="0 0 1793.982 1793.982" style="direction: ltr; color:#ffffff"><text x="65.501415" y="1537.02" font-size="1792" fill="currentColor" style="font-family: FontAwesome"></text></svg></a></div></div><div id="wb_element_instance6960_0" class="wb_element wb_element_picture" data-plugin="Picture" title=""><div class="wb_picture_wrap"><a href="http://t.me/Sam_SNSKY"><svg xmlns="http://www.w3.org/2000/svg" width="1793.982" height="1793.982" viewBox="0 0 1793.982 1793.982" style="direction: ltr; color:#ffffff"><text x="1.501415" y="1537.02" font-size="1792" fill="currentColor" style="font-family: FontAwesome"></text></svg></a></div></div></div></div></div></div><div id="wb_element_instance6961_0" class="wb_element wb-layout-element" data-plugin="LayoutElement"><div class="wb_content wb-layout-horizontal"><div id="wb_element_instance6962_0" class="wb_element wb_element_picture" data-plugin="Picture" title=""><div class="wb_picture_wrap"><svg xmlns="http://www.w3.org/2000/svg" width="1793.982" height="1793.982" viewBox="0 0 1793.982 1793.982" style="direction: ltr; color:#ffffff"><text x="1.501415" y="1537.02" font-size="1792" fill="currentColor" style="font-family: FontAwesome"></text></svg></div></div><div id="wb_element_instance6963_0" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p class="wb-stl-normal" style="text-align: right;"><a href="mailto:sam@sanskys.github.io"><u><span style="color:rgba(255,255,255,1);">sam</span></u><u><span style="color:rgba(255,255,255,1);">@sanskys.github.io</span></u></a></p>
</div></div></div></div></div></div></div><div id="wb_element_instance6964_0" class="wb_element wb-layout-element" data-plugin="LayoutElement"><div class="wb_content wb-layout-horizontal"><div id="wb_element_instance6965_0" class="wb_element wb-layout-element" data-plugin="LayoutElement"><div class="wb_content wb-layout-horizontal"><div id="wb_element_instance6966_0" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><h4 class="wb-stl-pagetitle"><a href="">SNSKY</a> Cardano Pool</h4>
</div><div id="wb_element_instance6967_0" class="wb_element wb-menu wb-prevent-layout-click wb-menu-mobile" data-plugin="Menu"><a class="btn btn-default btn-collapser"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></a><ul class="hmenu" dir="ltr"><li class=""><a href="#home" target="_self">Home</a></li><li class=""><a href="#about" target="_self">SNSKY Pool</a></li><li class=""><a href="#trees" target="_self">Ambassador</a></li><li class=""><a href="#howto" target="_self">FAQ</a></li><li class="active"><a href="dashboard" target="_self">Grafana Tutorial</a></li><li class=""><a href="advisor" target="_self">Twitter Bot</a></li></ul><div class="clearfix"></div></div></div></div></div></div></div></div><div id="wb_main_2" class="wb_element wb-layout-element" data-plugin="LayoutElement"><a name="main" class="wb_anchor"></a><div class="wb_content wb-layout-vertical"><div id="wb_element_instance1_2" class="wb_element wb-layout-element" data-plugin="LayoutElement"><a name="about-us" class="wb_anchor"></a><div class="wb_content wb-layout-vertical"></div></div><div id="wb_element_instance2_2" class="wb_element wb-layout-element" data-plugin="LayoutElement"><a name="gallery" class="wb_anchor"></a><div class="wb_content wb-layout-vertical"><div id="wb_element_instance3_2" class="wb_element wb-layout-element" data-plugin="LayoutElement"><div class="wb_content wb-layout-vertical"><div id="wb_element_instance4_2" class="wb_element wb_element_picture wb-anim-entry wb-anim-zoom-in-none" data-plugin="Picture" data-wb-anim-entry-time="0.6" title=""><div class="wb_picture_wrap"><a href="https://raw.githubusercontent.com/sandy4de/SNSKY/main/SNSKY_Dashboard_v2.json"><img alt="" src="gallery_gen/6aaef6221ba53739628df6959598b271_1016x411.jpg"></a></div></div><div id="wb_element_instance5_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p class="wb-stl-normal"> </p>

<p class="wb-stl-normal"> </p>

<p class="wb-stl-normal"> </p>
</div><div id="wb_element_instance6_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><h3 class="wb-stl-heading3" style="text-align: center;"><span style="color:rgba(0,0,0,1);">Setting up a Grafana Dashboard for Cardano Pool</span></h3>
</div><div id="wb_element_instance7_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"></div><div id="wb_element_instance8_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>Once you have sucessfully set-up a Cardano pool, then comes the most beautifull part - setting up your Dashboard and Alerts! You surely dont want to gaze the PC whole day, or?</p>

<p> </p>

<p>I found it difficult to get all the information at one place so am writing this documentaion and hopeully it helps others as well. This tutorial is for education and learning purpose only.</p>

<p> </p>

<p>Prerequisites:</p>

<p>- Ubuntu Server 20.04 LTS (for Ubuntu 18.04 LTS please follow the alternative steps)</p>

<p>- Cardano Block Producer Node (PN) up and running</p>

<p>- Cardano Relay Nodes (RN) up and running</p>

<p> </p>

<p>Content</p>

<p><a href="dashboard#1"><strong>1. Install prometheus node exporter on Block Producing Node</strong></a></p>

<p><a href="dashboard#2"><strong>2. Install Prometheus and prometheus node exporter on Relay Node</strong></a></p>

<p><a href="dashboard#3"><strong>3. Install Grafana on Relay Node</strong></a></p>

<p><a href="dashboard#4"><strong>4. Setting up Grafana Dashboard</strong></a></p>

<p><a href="dashboard#5"><strong>5. Add Data from Adapools to the Dashboard</strong></a></p>

<p><a href="dashboard#6"><strong>6. Optional: Add Live Data to your Dashboard using PoolData.Live API</strong></a></p>

<p><a href="dashboard#7"><strong>7. As last step let's now setup Grafana Alerting and Email Notifications</strong></a></p>

<p><a href="dashboard#8"><strong>8. Recommended: Disabling Grafana Registrations and Anonymous Access</strong></a></p>

<p><a href="dashboard#9"><strong>9. Advanced Users: Slot Leader Panel</strong></a></p>
</div><div id="wb_element_instance9_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><a name="1" class="wb_anchor"></a><p> </p>

<p><strong>1. Install prometheus node exporter on Block Producing Node</strong></p>

<p> </p>

<p>for Ubuntu 20.04 </p>
</div><div id="wb_element_instance10_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p><br>
<span style="color:rgba(122,163,240,1);">$ sudo apt-get install -y prometheus-node-exporter</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl enable prometheus-node-exporter.service</span></p>

<p> </p>
</div><div id="wb_element_instance11_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>for Ubuntu 18.04 install node_exporter as prometheus-node-exporter does not expose all metrics</p>
</div><div id="wb_element_instance12_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p><span style="color:rgba(122,163,240,1);">$ cd $HOME/git<br>
$ wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz (choose your right server version)<br>
$ tar xvfz node_exporter-1.1.2.linux-amd64.tar.gz</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo cp node_exporter-1.1.2.linux-amd64/node_exporter /usr/local/bin</span></p>

<p><span style="color:rgba(122,163,240,1);">$ chown node_exporter:node_exporter /usr/local/bin/node_exporter</span></p>

<p><span style="color:rgba(122,163,240,1);">$ cd /etc/systemd/system</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo nano node_exporter.service</span></p>
</div><div id="wb_element_instance13_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>Then, paste the following configuration for your service.</p>
</div><div id="wb_element_instance14_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p><span style="color:rgba(122,163,240,1);">#############################</span></p>

<p><span style="color:rgba(122,163,240,1);">[Unit]<br>
Description=Node Exporter<br>
Wants=network-online.target<br>
After=network-online.target</span></p>

<p><span style="color:rgba(122,163,240,1);">[Service]<br>
User=&lt;your user name&gt;<br>
ExecStart=/usr/local/bin/node_exporter<br>
[Install]<br>
WantedBy=default.target</span></p>

<p><span style="color:rgba(122,163,240,1);">#############################</span></p>
</div><div id="wb_element_instance15_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>Exit nano, reload your daemon, and start your service.</p>
</div><div id="wb_element_instance16_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p><span style="color:rgba(122,163,240,1);">$ sudo systemctl daemon-reload</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl start node_exporter</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl enable node_exporter.service</span></p>
</div><div id="wb_element_instance17_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>for Ubuntu 18.04 use from now on in the tutorial the node_exporter.service instead of prometheus-node-exporter.service</p>

<p> </p>

<p>Update mainnet-config.json config files with new hasEKG and has Prometheus ports.</p>
</div><div id="wb_element_instance18_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p><span style="color:rgba(122,163,240,1);">$ cd $NODE_HOME<br>
$ sed -i mainnet-config.json -e "s/127.0.0.1/0.0.0.0/g"  </span></p>
</div><div id="wb_element_instance19_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>On PN you need to open ports 12798 and 9100</p>
</div><div id="wb_element_instance20_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p><span style="color:rgba(122,163,240,1);">$ sudo ufw allow proto tcp from &lt;RN IP address&gt; to any port 9100</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo ufw allow proto tcp from &lt;RN IP address&gt; to any port 12798</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo ufw reload</span></p>
</div><div id="wb_element_instance21_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>restart the node</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl restart &lt;your BP node name e.g. cnode&gt;</span></p>
</div><div id="wb_element_instance22_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><a name="2" class="wb_anchor"></a><p> </p>

<p><strong>2. Install Prometheus and prometheus node exporter on Relay Node</strong></p>

<p> </p>
</div><div id="wb_element_instance23_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>install Prometheus</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo apt-get install -y prometheus</span></p>

<p> </p>

<p>Install prometheus node exporter on RN (Ubuntu 20.04)</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo apt-get install -y prometheus-node-exporter</span></p>
</div><div id="wb_element_instance24_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>for Ubuntu 18.04 repeat the steps of PN above in the RN as well and install the node_exporter service instead</p>

<p> </p>

<p>repeat Step 2 for all your RN</p>
</div><div id="wb_element_instance25_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><a name="3" class="wb_anchor"></a><p> </p>

<p><strong>3. Install Grafana on Relay Node</strong></p>

<p> </p>
</div><div id="wb_element_instance26_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p><span style="color:rgba(122,163,240,1);">$ wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -</span></p>

<p><span style="color:rgba(122,163,240,1);">$ echo "deb https://packages.grafana.com/oss/deb stable main" &gt; grafana.list<br>
$ sudo mv grafana.list /etc/apt/sources.list.d/grafana.list</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo apt-get update &amp;&amp; sudo apt-get install -y grafana</span></p>
</div><div id="wb_element_instance27_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>Enable services so they start automatically</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl enable grafana-server.service<br>
$ sudo systemctl enable prometheus.service<br>
$ sudo systemctl enable prometheus-node-exporter.service</span></p>
</div><div id="wb_element_instance28_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>Update prometheus.yml located in /etc/prometheus/prometheus.yml</p>

<p>Change the &lt;block producer public ip address&gt; in the following command</p>
</div><div id="wb_element_instance29_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p><span style="color:rgba(122,163,240,1);">$ cat &gt; prometheus.yml &lt;&lt; EOF<br>
global:<br>
  scrape_interval:     15s # By default, scrape targets every 15 seconds.</span></p>

<p><span style="color:rgba(122,163,240,1);">  # Attach these labels to any time series or alerts when communicating with<br>
  # external systems (federation, remote storage, Alertmanager).<br>
  external_labels:<br>
    monitor: 'codelab-monitor'</span></p>

<p><span style="color:rgba(122,163,240,1);"># A scrape configuration containing exactly one endpoint to scrape:<br>
# Here it's Prometheus itself.<br>
scrape_configs:<br>
  # The job name is added as a label job=&lt;job_name&gt; to any timeseries scraped from this config.<br>
  - job_name: 'prometheus'</span></p>

<p><span style="color:rgba(122,163,240,1);">    static_configs:<br>
      - targets: ['localhost:9100']</span></p>

<p><span style="color:rgba(122,163,240,1);">        labels:<br>
          alias: 'relaynode1'<br>
          type:  'cardano-node'</span></p>

<p><span style="color:rgba(122,163,240,1);">      - targets: ['&lt;relay node 2 public ip address&gt;:9100']</span></p>

<p><span style="color:rgba(122,163,240,1);">        labels:<br>
          alias: 'relaynode2'<br>
          type:  'cardano-node'<br>
      - targets: ['&lt;block producer public ip address&gt;:9100']</span></p>

<p><span style="color:rgba(122,163,240,1);">        labels:<br>
          alias: 'block-producer-node'<br>
          type:  'cardano-node'<br>
     - targets: ['localhost:12798']<br>
        labels:<br>
          alias: 'relaynode1'<br>
          type:  'cardano-node'</span></p>

<p><span style="color:rgba(122,163,240,1);">     - targets: ['&lt;relay node 2 public ip address&gt;:12798']</span></p>

<p><span style="color:rgba(122,163,240,1);">        labels:<br>
          alias: 'relaynode2'<br>
          type:  'cardano-node'</span></p>

<p><span style="color:rgba(122,163,240,1);">     - targets: ['&lt;block producer public ip address&gt;:12798']<br>
        labels:<br>
          alias: 'block-producer-node'<br>
          type:  'cardano-node'</span></p>

<p><span style="color:rgba(122,163,240,1);">EOF</span></p>
</div><div id="wb_element_instance30_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>if you have more than two RNs, add all your Relays as new "targets" in the config above </p>

<p><span style="color:rgba(122,163,240,1);">$ sudo mv prometheus.yml /etc/prometheus/prometheus.yml</span></p>
</div><div id="wb_element_instance31_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>restart the services</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl restart grafana-server.service<br>
$ sudo systemctl restart prometheus.service<br>
$ sudo systemctl restart prometheus-node-exporter.service</span></p>
</div><div id="wb_element_instance32_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>Verify that the services are running properly</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl status grafana-server.service prometheus.service prometheus-node-exporter.service</span></p>
</div><div id="wb_element_instance33_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>On RN open ports 3000 for Grafana</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo ufw allow from &lt;your local IP address&gt; to any port 3000</span></p>
</div><div id="wb_element_instance34_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><a name="4" class="wb_anchor"></a><p> </p>

<p><strong>4. Setting up Grafana Dashboard</strong></p>

<p> </p>
</div><div id="wb_element_instance35_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>On RN, open http://localhost:3000 or http://&lt;your relaynode ip address&gt;:3000 in your local browser. <br>
Login with admin / admin<br>
Change password</p>

<p> </p>

<p>Click the configuration gear icon, then Add data Source<br>
Select Prometheus<br>
Set Name to "Prometheus"<br>
Set URL to http://localhost:9090<br>
Click Save &amp; Test</p>

<p> </p>

<p>Download my Dashboard that you see on the top of this page, from the following GitHub link and save the JSON file</p>

<p> </p>

<p><span style="color:rgba(122,163,240,1);">h<a href="https://raw.githubusercontent.com/sanskys/SNSKY/main/SNSKY_Dashboard_v2.json">ttps://raw.githubusercontent.com/sanskys/SNSKY/main/SNSKY_Dashboard_v2.json</a></span></p>

<p> </p>

<p>in Grafana, Click Create + icon (in left Menu) &gt; Import<br>
Add dashboard by Upload JSON file<br>
Click the Import button.</p>

<p> </p>

<p>If you nodes are in several time zones, it is usefull to add the Grafan Clock panel</p>

<p><span style="color:rgba(122,163,240,1);">$ grafana-cli plugins install grafana-clock-panel</span></p>

<p> </p>

<p>Installed panels are available immediately in the Dashboards section in your Grafana main menu.</p>

<p>To see a list of installed panels, click the Plugins item in the main menu. Both core panels and installed panels will appear.</p>
</div><div id="wb_element_instance36_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><a name="5" class="wb_anchor"></a><p> </p>

<p><strong>5. Add Data from Adapools to the Dashboard</strong></p>

<p> </p>
</div><div id="wb_element_instance37_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>Copy your JSON link or your Pool ID from Share/Promote Tab and JSON data outputs in adapools.org</p>

<p> </p>

<p>Prometheus can work only with numeric data, so we must first trim non numeric strings which is returned from the JSON file. Lets create a shell script getstat.sh for the same</p>
</div><div id="wb_element_instance38_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p><span style="color:rgba(122,163,240,1);">###############################</span></p>

<p><span style="color:rgba(122,163,240,1);">cd /$NODE_HOME </span></p>

<p><span style="color:rgba(122,163,240,1);">mkdir -p poolStat</span></p>

<p><span style="color:rgba(122,163,240,1);">cd poolStat </span></p>

<p><span style="color:rgba(122,163,240,1);">echo "curl https://js.adapools.org/pools/&lt; YOUR POOL ID &gt;/summary.json 2&gt;/dev/null \</span></p>

<p><span style="color:rgba(122,163,240,1);">| jq '.data | del(.pool_id_bech32, .hist_bpe, .handles, .hist_roa, .db_ticker, .db_name, .db_url, .ticker_orig, .group_basic, .pool_id, .direct, .db_description, .tax_ratio_old, .tax_fix_old)' \</span></p>

<p><span style="color:rgba(122,163,240,1);">| tr -d \\\"{},: \</span></p>

<p><span style="color:rgba(122,163,240,1);">| awk NF \</span></p>

<p><span style="color:rgba(122,163,240,1);">| sed -e 's/^[ \t]*/adapools_/' &gt; poolStat.prom" &gt; getstats.sh</span></p>

<p><span style="color:rgba(122,163,240,1);">chmod +x getstats.sh</span></p>

<p><span style="color:rgba(122,163,240,1);">./getstats.sh</span></p>

<p><span style="color:rgba(122,163,240,1);">###############################</span></p>
</div><div id="wb_element_instance39_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>check the content of adapools.prom and it should not contain only numeric values</p>

<p><span style="color:rgba(122,163,240,1);">$ nano poolStat.prom</span></p>

<p> </p>

<p>Configure promethues-node-exporter.service to grab data from poolStat.prom file</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo cp /lib/systemd/system/prometheus-node-exporter.service /lib/systemd/system/prometheus-node-exporter.service_backup</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo nano /lib/systemd/system/prometheus-node-exporter.service</span></p>
</div><div id="wb_element_instance40_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>Change ExecStart line to</p>

<p><span style="color:rgba(122,163,240,1);">##############################</span></p>

<p><span style="color:rgba(122,163,240,1);">ExecStart=/usr/bin/prometheus-node-exporter --collector.textfile.directory=&lt; YOUR NODE FULL PATH &gt;/poolStat --collector.textfile</span></p>

<p><span style="color:rgba(122,163,240,1);">##############################</span></p>
</div><div id="wb_element_instance41_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>Reload daemon and restart services</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl daemon-reload</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl restart prometheus-node-exporter.service</span></p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl restart prometheus.service</span></p>

<p> </p>

<p>Now you should see in the Dashboard all Adapool statistics</p>

<p> </p>

<p>Since the statistics will change, lets set cron job to update data from ADApools everyday</p>

<p> </p>

<p><span style="color:rgba(122,163,240,1);">$ crontab -e</span></p>

<p> </p>

<p><span style="color:rgba(122,163,240,1);">##############################</span></p>

<p><span style="color:rgba(122,163,240,1);">#Get data from ADApools every day at 06:00</span></p>

<p><span style="color:rgba(122,163,240,1);">0 6 * * * &lt;YOUR NODE FULL PATH &gt;/poolStat/getstats.sh</span></p>

<p><span style="color:rgba(122,163,240,1);">##############################</span></p>

<p> </p>

<p>Done!</p>
</div><div id="wb_element_instance42_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><a name="6" class="wb_anchor"></a><p> </p>

<p><strong>6. Optional but Usefull: Add Live Data to your Dashboard using PoolData.Live API</strong></p>

<p> </p>
</div><div id="wb_element_instance43_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>In the method in Step 5 we get the data by running a cron job and so it's not Live. In case you wish to have live data from the Mainnet for example to get immidiate Alerts in case your Pledge reduces or you have new delegators then the API from PoolData is very usefull. Additionaly, as in the adapools method we have to trim all non numeric strings we have limited metrics. With PoolData we have access to wider range of metrics like Delegator list.</p>

<p> </p>

<p><em>The API requires Grafana v8.1 and above, so before continuing please upgrade or skip this step for the moment.</em></p>

<p> </p>

<p>As a first Step we need to install the Plugin - JSON</p>

<p><span style="color:rgba(122,163,240,1);">$ grafana-cli plugins install simpod-json-datasource</span></p>

<p> </p>

<p>now login into your Grafana and under Configurations --&gt; Data sources section, click on "Add data source" - you will see the new JSON datasource available at the end of the list.</p>

<p> </p>

<p>Now lets configure JSON to load your Pool data into grafana. Under HTTP Section and URL field paste the following:</p>

<p> </p>

<p><span style="color:rgba(122,163,240,1);">https://api.pooldata.live/cardano/&lt; YOUR POOL ID &gt;</span></p>

<p>where &lt; YOUR POOL ID &gt; is the same ID that you got from adapools.org in Step 5</p>

<p> </p>

<p>Now press "Save and test" and you will start receiving live data directly in your Dashboard.</p>
</div><div id="wb_element_instance44_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><a name="7" class="wb_anchor"></a><p> </p>

<p><strong>7. As last step let's now setup Grafana Alerting and Email Notifications</strong></p>

<p> </p>
</div><div id="wb_element_instance45_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>Setup SMTP in Grafana</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo nano /etc/grafana/grafana.ini</span></p>

<p> </p>

<p>Edit the SMTP section</p>

<p><span style="color:rgba(122,163,240,1);">#############################</span></p>

<p><span style="color:rgba(122,163,240,1);">[smtp]                                                                                                       <br>
enabled = true                                                                                       <br>
host = smtp.&lt;email server&gt;:465<br>
user = &lt;email user name&gt;<br>
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""<br>
password = &lt;email password&gt;<br>
from_address = sam@sanskys.github.io<br>
from_name = Grafana</span></p>

<p><span style="color:rgba(122,163,240,1);">#############################</span></p>

<p> </p>

<p>Login to Grafana with username and password.</p>

<p>Click on the "Bell" icon on the left sidebar.</p>

<p>Select "Notification channels."</p>

<p> </p>

<p>Click on "Add Channel." This will open a form for adding new notification channel.</p>

<p>Give a name to this channel. I am using "Alert"</p>

<p> </p>

<p>Select Email from "Type" as we want to send notifications over email.</p>

<p>Check the "Send on all alerts" in case you want email on all alerts.</p>

<p>Select the checkbox of "Include image" in case you want to include the image of the panel as the body in the notification email.</p>

<p>Add the target email in "Email addresses" text area. You can use multiple email address separated by ";"</p>

<p> </p>

<p>Click on "Send Test" if you want to verify your settings. This will send a sample email using the SMTP details we configured earlier.</p>

<p>Click on "Save" to add this channel</p>

<p> </p>

<p>Create an Alert if PN is not reachable</p>

<p> </p>

<p>Please not that Alerts can only be created for "Graph" panels!</p>

<p>Now we create an Alert to get an emaial if the PN is not reachable</p>

<p> </p>

<p>In the "Connected Peers" panel go to Alerts</p>

<p>Define the Rule "Connected Peer Alert" Evaluate every "1m" For "2m"</p>

<p> </p>

<p>Condition</p>

<p>WHEN "last()" OF "query(A, 1m, now)" "HAS NO VALUE"</p>

<p> </p>

<p>No Data &amp; Error Handling</p>

<p>If no data or all values are null SET STATE TO "No Data"</p>

<p>If execution error or timeout SET STATE TO "Alerting"</p>

<p> </p>

<p>Notifications</p>

<p>Send To - Choose your notofication channel, which in my case is "Alert"</p>

<p>Message - type in your alert message that should appear in the email</p>

<p> </p>

<p>Press on "test Rule" to ensure that the Alert is correct and has no issues.</p>

<p>Now you are done! Stop you PN and you should get an Alert within 4min.</p>
</div><div id="wb_element_instance46_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p><span style="color:rgba(92,113,219,1);">If everything works, now you should have a smile on your face and if you wish you could donate me 1 ADA or delegate to my pool - Sam's North SKY [SNSKY]</span></p>

<p> </p>

<p><span style="color:rgba(92,113,219,1);">addr1qyyhd8cpv4gmhr5axerhezhtzldrw4rp9ayf0fc6arnme4cg46du2qg366943uy0dw5yjmna7arfw265lu4r2fjccl4scf7xrw</span></p>
</div><div id="wb_element_instance47_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><a name="8" class="wb_anchor"></a><p> </p>

<p><strong>8. Recommended: Disabling Grafana Registrations and Anonymous Access</strong></p>

<p> </p>

<p>We should make Grafana a bit more sucure and to do so lets change two settings</p>

<p><span style="color:rgba(122,163,240,1);">$ sudo nano /etc/grafana/grafana.ini</span></p>

<p> </p>

<p>Locate the following allow_sign_up directive under the [users] heading and change the line to as follows</p>

<p><span style="color:rgba(122,163,240,1);">##########</span></p>

<p><span style="color:rgba(122,163,240,1);">[users] # disable user signup / registration</span></p>

<p><span style="color:rgba(122,163,240,1);">allow_sign_up = false</span></p>

<p><span style="color:rgba(122,163,240,1);">##########</span></p>

<p> </p>

<p>Next, locate the following enabled directive under the [auth.anonymous] heading and change the line to as follows</p>

<p><span style="color:rgba(122,163,240,1);">##########</span></p>

<p><span style="color:rgba(122,163,240,1);">[auth.anonymous]</span></p>

<p><span style="color:rgba(122,163,240,1);">enabled = false</span></p>

<p><span style="color:rgba(122,163,240,1);">##########</span></p>

<p> </p>

<p>Save the file and exit your text editor and to activate the changes, restart Grafana.</p>

<p> </p>

<p><span style="color:rgba(122,163,240,1);">$ sudo systemctl restart grafana-server</span></p>

<p> </p>

<p> </p>

<p>I have included a panel on Leader Slots, which can Alert in case your pool is selected as a leader for the next Epoch. It is a bit more complicated, so will leave it out of the tutorial, but in principle there is script running on the PN which updates the leader query result in a prom file which is parsed by the node exporter, exposing this metrics to the RN. In case you wish to use it and need the details, just drop me a message on Telegram.</p>
</div><div id="wb_element_instance48_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p>*********************************************************************</p>

<p>References:</p>

<p>https://prometheus.io/docs/guides/node-exporter/</p>

<p>https://grafana.com/docs/grafana/latest/alerting/notifications/</p>

<p>https://www.coincashew.com/coins/overview-ada/guide-how-to-build-a-haskell-stakepool-node/16.-setup-prometheus-and-grafana-dashboard</p>

<p>https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-grafana-on-ubuntu-18-04</p>

<p>https://pooldata.live/</p>

<p>*********************************************************************</p>
</div><div id="wb_element_instance49_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p> </p>

<p> </p>

<p> </p>

<p> </p>

<p> </p>

<p> </p>
</div><div id="wb_element_instance50_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><a name="9" class="wb_anchor"></a><p> </p>

<p><strong>9. Advanced Users: Slot Leader Panel</strong></p>

<p> </p>
</div><div id="wb_element_instance51_2" class="wb_element wb_element_picture" data-plugin="Picture" title=""><div class="wb_picture_wrap"><img alt="" src="gallery_gen/6b7f55bc225c4e30f346bf154cb39f22_1300x246.jpeg"></div></div><div id="wb_element_instance52_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p> </p>

<p> </p>

<p> </p>
</div><div id="wb_element_instance53_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p> </p>

<p>Once your Pool gets big and is regularly minting blocks, it becomes diffcult to keep track of all Leader Slots and also to identify the available gaps for Pool maintainance. This Slot Leader Panel is quite helpful as it gives a good overview of all scheduled Slots in TimeSeries.</p>

<p> </p>

<p>First Step is to get the Leaderlog. This can be done using the cncli tool: https://github.com/AndrewWestberg/cncli</p>

<p> </p>

<p>Since the log has to interpreted by Grafana, we need to format it in a readable syntax. Please add the following lines to your cncli-leaderlog shell script and change the timezone to UTC. Grafana expects the timestamp in UTC and uses browser time, to convert the timestamp to local time zone.</p>

<p> </p>

<p><span style="color:rgba(122,163,240,1);">#######################################################################</span></p>

<p><span style="color:rgba(122,163,240,1);">AT=$(jq '.[].at' &lt;&lt;&lt; $ASSIGNED | sed -e 's/.......$//' -e 's/T/ /g' -e 's/"/''/g') </span></p>

<p><span style="color:rgba(122,163,240,1);">SLOT=$(jq '.[].slot' &lt;&lt;&lt; $ASSIGNED) </span></p>

<p><span style="color:rgba(122,163,240,1);">NO=$(jq '.[].no' &lt;&lt;&lt; $ASSIGNED) </span></p>

<p> </p>

<p><span style="color:rgba(122,163,240,1);">paste &lt;(echo "$AT") &lt;(echo "$SLOT") &lt;(echo "") &lt;(echo "$NO") --delimiters , &gt; slot.csv </span></p>

<p><span style="color:rgba(122,163,240,1);">sed -i '1 i\Time,Slot,No' slot.csv </span></p>

<p><span style="color:rgba(122,163,240,1);">cat slot.csv </span></p>

<p><span style="color:rgba(122,163,240,1);">#######################################################################</span></p>

<p> </p>

<p>The whole script including this addition can be copied from here:</p>

<p><a href="https://github.com/sanskys/SNSKY/blob/main/SlotLeader/script.sh">https://github.com/sanskys/SNSKY/blob/main/SlotLeader/script.sh</a></p>

<p> </p>

<p>Copy the slot.csv file to your Grafana node manually. This step could be automated but I dont wish to open extra ports for this so I just copy and paste the content of the slot.csv file.</p>

<p> </p>
</div><div id="wb_element_instance54_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p> </p>

<p>Next, we add the CSV Plugin to Grafana. Please follow the instructions under the section <strong>"Installing on a local Grafana:"</strong></p>

<p> </p>

<p><a href="https://grafana.com/grafana/plugins/marcusolsson-csv-datasource/?tab=installation">https://grafana.com/grafana/plugins/marcusolsson-csv-datasource/?tab=installation</a></p>

<p> </p>

<p>After the installation, in Data Sources now the CSV Plugin should be listed. Configure the CSV Plugin by specifying the location of the slot.csv file. Save &amp; Test and if all steps were followed correctly, you should get the green sucess messsage.</p>

<p> </p>
</div><div id="wb_element_instance55_2" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p> </p>

<p>The final step is to add the <strong>Slot Leader</strong> Panel to your dashboard. For that click on the "<strong>Add Panel</strong>" and "<strong>Add New Panel</strong>" icons.</p>

<p>Then click on "<strong>Query inspector</strong>" and and "<strong>JSON</strong>" buttons.</p>

<p>Delete the existing JSON code and replace it with the following:</p>

<p> </p>

<p><a href="https://github.com/sanskys/SNSKY/blob/main/SlotLeader/LeaderPanel.json">https://github.com/sanskys/SNSKY/blob/main/SlotLeader/LeaderPanel.json</a></p>

<p> </p>

<p>Now click on "<strong>Apply"</strong> and thats it! You should be able to see all your Leader Slots from last 6 Hrs to next 18 Hrs and this time window shifts automaically.</p>

<p> </p>

<p>Happy minting!</p>

<p> </p>

<p> </p>
</div></div></div></div></div><div id="wb_element_instance56_2" class="wb_element wb-layout-element" data-plugin="LayoutElement"><a name="contacts" class="wb_anchor"></a><div class="wb_content wb-layout-horizontal"></div></div></div></div><div id="wb_footer_2" class="wb_element wb-layout-element" data-plugin="LayoutElement"><a name="footer" class="wb_anchor"></a><div class="wb_content wb-layout-vertical"><div id="wb_element_instance6968_0" class="wb_element wb-layout-element" data-plugin="LayoutElement"><div class="wb_content wb-layout-horizontal"><div id="wb_element_instance6969_0" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p class="wb-stl-footer">© 2021 <a href="http://sanskys.github.io">sanskys.github.io</a></p></div><div id="wb_element_instance6970_0" class="wb_element wb_text_element" data-plugin="TextArea" style=" line-height: normal;"><p class="wb-stl-footer"><a href="gallery/Datenschutzerklaerung.pdf" title="Data Privacy">Data Privacy</a></p>
</div></div></div><div id="wb_footer_c_0" class="wb_element" data-plugin="WB_Footer" style="text-align: center; width: 100%;"><div class="wb_footer"></div><script type="text/javascript">
			$(function() {
				var footer = $(".wb_footer");
				var html = (footer.html() + "").replace(/^\s+|\s+$/g, "");
				if (!html) {
					footer.parent().remove();
					footer = $("#wb_footer, #wb_footer .wb_cont_inner");
					footer.css({height: ""});
				}
			});
			</script></div></div></div></div></body>
</html>
